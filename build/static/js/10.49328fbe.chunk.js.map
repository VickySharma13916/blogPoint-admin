{"version":3,"sources":["redux/types/dashboardTypes.js","partials/Dashboard/DashboardView.js","redux/actionCreators/dashboardCreators.js","redux/actions/dashboardActions.js","containers/Dashboard/index.js","services/utils.js","services/requests.js","../node_modules/react-bootstrap/esm/Row.js"],"names":["DASHBOARD_TYPES","GET_DASHBOARD_DETAILS_BEGIN","GET_DASHBOARD_DETAILS_SUCCESS","GET_DASHBOARD_DETAILS_FAILURE","RESET_STATE","SET_FILTERS","RESET_FILTERS","connect","state","dispatch","getDashboardDetails","payload","type","GET","url","ENDPOINTS","GET_DASHBOARD_DETAIL","result","data","getDashboardFailure","fetching","className","Spinner","animation","variant","role","Card","border","Body","Row","Dashboard","Page","id","title","options","extractErrorMessage","_","isString","error","console","log","errorHandler","status","store","showSnack","message","getToken","a","getState","token","auth","access","refresh","decodedToken","jwt_decode","date","Date","setUTCSeconds","exp","valueOf","axios","post","BASE_URL","REFRESH_TOKEN","refreshToken","refreshTokenSuccess","accessToken","response","makeRequest","Promise","resolve","reject","defaultOptions","baseURL","headers","reason","timeout","client","create","interceptors","request","use","config","Authorization","then","catch","params","method","POST","DEVICE_SIZES","React","ref","bsPrefix","as","Component","props","decoratedBsPrefix","useBootstrapPrefix","sizePrefix","classes","forEach","brkPoint","cols","propValue","infix","push","_jsx","classNames","displayName"],"mappings":"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","file":"static/js/10.49328fbe.chunk.js","sourcesContent":["const DASHBOARD_TYPES = {\r\n  GET_DASHBOARD_DETAILS_BEGIN: \"GET_DASHBOARD_DETAILS_BEGIN\",\r\n  GET_DASHBOARD_DETAILS_SUCCESS: \"GET_DASHBOARD_DETAILS_SUCCESS\",\r\n  GET_DASHBOARD_DETAILS_FAILURE: \"GET_DASHBOARD_DETAILS_FAILURE\",\r\n\r\n  RESET_STATE: \"RESET_STATE\",\r\n  SET_FILTERS: \"SET_FILTERS\",\r\n  RESET_FILTERS: \"RESET_FILTERS\",\r\n};\r\n\r\nexport default DASHBOARD_TYPES;\r\n","import React from \"react\";\r\nimport { Card, Row, Spinner } from \"react-bootstrap\";\r\nimport { connect } from \"react-redux\";\r\nimport { performGetDashboardDetails } from \"../../redux/actionCreators/dashboardCreators\";\r\n\r\nconst DashboardView = ({ fetching, getDashboardDetails }) => {\r\n  // const [dashboardData, setDashboardData] = useState([]);\r\n  // const handleDashboardDetail = async () => {\r\n  //   const result = await getDashboardDetails();\r\n  //   if (result.status) {\r\n  //     setDashboardData(result?.data);\r\n  //   }\r\n  // };\r\n\r\n  // useEffect(() => {\r\n  //   handleDashboardDetail();\r\n  //   // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  // }, []);\r\n\r\n  // const TileDashboard = ({ dashboardName, dashboardCount }) => {\r\n  //   return (\r\n  //     <>\r\n  //       <div className=\"single_dashboard\">\r\n  //         <div className=\"single_dashboard_name\">{dashboardName}</div>\r\n  //         <div className=\"single_dashboard_count\">{dashboardCount}</div>\r\n  //       </div>\r\n  //     </>\r\n  //   );\r\n  // };\r\n\r\n  // const {\r\n  //   productInCart,\r\n  //   productInWishlist,\r\n  //   publicLists,\r\n  //   privateLists,\r\n  //   products,\r\n  //   users,\r\n  //   referredUsers,\r\n  //   activeUsers,\r\n  // } = dashboardData;\r\n\r\n  return (\r\n    <>\r\n      <h1>Dashboard</h1>\r\n      {fetching ? (\r\n        <div className=\"spinner-data\">\r\n          <Spinner animation=\"border\" variant=\"primary\" role=\"status\" />\r\n        </div>\r\n      ) : (\r\n        <>\r\n          <Card\r\n            border=\"light\"\r\n            className=\"w-100 mx-auto py-3 px-3 mb-5 position-relative\"\r\n          >\r\n            <Card.Body>\r\n              <Row>\r\n                {/* <Col className=\"d-flex flex-wrap p-0 gap-3\">\r\n                  <TileDashboard\r\n                    dashboardName={\"Users\"}\r\n                    dashboardCount={users}\r\n                  />\r\n                  <TileDashboard\r\n                    dashboardName={\"Active Users\"}\r\n                    dashboardCount={activeUsers}\r\n                  />\r\n                  <TileDashboard\r\n                    dashboardName={\"Referred Users\"}\r\n                    dashboardCount={referredUsers}\r\n                  />\r\n                  <TileDashboard\r\n                    dashboardName={\"Products\"}\r\n                    dashboardCount={products}\r\n                  />\r\n                </Col> */}\r\n              </Row>\r\n              <Row className=\"mt-3\">\r\n                {/* <Col className=\"p-0\">\r\n                  <div className=\"Bar_chart\">\r\n                    <DashboardChart\r\n                      data1={publicLists}\r\n                      data2={privateLists}\r\n                      text1={\"Public List\"}\r\n                      text2={\"Private List\"}\r\n                      titleText={\"Public and Private Lists\"}\r\n                    />\r\n                  </div>\r\n                </Col>\r\n                <Col className=\"p-0\">\r\n                  <div className=\"Bar_chart\">\r\n                    <DashboardChart\r\n                      data1={productInWishlist}\r\n                      data2={productInCart}\r\n                      text1={\"Product in Wishlist\"}\r\n                      text2={\"Product in Cart\"}\r\n                      titleText={\"Products in Wishlist and Cart\"}\r\n                    />\r\n                  </div>\r\n                </Col> */}\r\n              </Row>\r\n            </Card.Body>\r\n          </Card>\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  // fetching: state.dashboard.fetching,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  getDashboardDetails: (payload) =>\r\n    dispatch(performGetDashboardDetails(payload)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(DashboardView);\r\n","import {\r\n  getDashboardBegin,\r\n  getDashboardFailure,\r\n  getDashboardSuccess,\r\n} from \"../actions/dashboardActions\";\r\nimport ENDPOINTS, { GET } from \"../../services/requests\";\r\n\r\nexport function performGetDashboardDetails() {\r\n  return async (dispatch) => {\r\n    dispatch(getDashboardBegin());\r\n    try {\r\n      const result = await GET({ url: ENDPOINTS.GET_DASHBOARD_DETAIL });\r\n      dispatch(getDashboardSuccess(result.data));\r\n      return result;\r\n    } catch (error) {\r\n      dispatch(getDashboardFailure());\r\n      return false;\r\n    }\r\n  };\r\n}\r\n","import DASHBOARD_TYPES from \"../types/dashboardTypes\";\r\n\r\nexport const resetState = () => ({\r\n  type: DASHBOARD_TYPES.RESET_STATE,\r\n});\r\n\r\nexport const getDashboardBegin = () => ({\r\n  type: DASHBOARD_TYPES.GET_DASHBOARD_DETAILS_BEGIN,\r\n});\r\n\r\nexport const getDashboardSuccess = (data) => ({\r\n  type: DASHBOARD_TYPES.GET_DASHBOARD_DETAILS_SUCCESS,\r\n  payload: data,\r\n});\r\n\r\nexport const getDashboardFailure = (error) => ({\r\n  type: DASHBOARD_TYPES.GET_DASHBOARD_DETAILS_FAILURE,\r\n  payload: error,\r\n});\r\n\r\nexport const setFilters = (data) => ({\r\n  type: DASHBOARD_TYPES.SET_FILTERS,\r\n  payload: data,\r\n});\r\n\r\nexport const resetFilters = () => ({\r\n  type: DASHBOARD_TYPES.RESET_FILTERS,\r\n});\r\n","import React from \"react\";\r\nimport Page from \"../../components/Page\";\r\nimport DashboardView from \"../../partials/Dashboard/DashboardView\";\r\n\r\nconst Dashboard = () => {\r\n  return (\r\n    <Page id=\"page--dashboard\" title=\"Dashboard\">\r\n      <DashboardView />\r\n    </Page>\r\n  );\r\n};\r\n\r\nexport default Dashboard;","import axios from \"axios\";\r\nimport jwt_decode from \"jwt-decode\";\r\nimport _ from \"lodash-es\";\r\nimport { showSnack } from \"../redux/actions/alertActions\";\r\nimport { refreshTokenSuccess } from \"../redux/actions/authActions\";\r\nimport { store } from \"../redux/store\";\r\nimport { BASE_URL, ENDPOINTS } from \"./constants\";\r\n\r\nconst options = {\r\n  variant: \"error\",\r\n};\r\n\r\nconst extractErrorMessage = (data) => {\r\n  if (_.isString(data)) {\r\n    return data;\r\n  }\r\n\r\n  if (!data.error) {\r\n    return \"Something went wrong\";\r\n  }\r\n\r\n  if (!_.isString(data.error)) {\r\n    console.log(data.error);\r\n  }\r\n\r\n  return data.error;\r\n};\r\n\r\nexport const errorHandler = ({ status, data }) => {\r\n  switch (status) {\r\n    case 401:\r\n      store.dispatch(\r\n        showSnack({ message: extractErrorMessage(data), options })\r\n      );\r\n      // store.dispatch(logout());\r\n      break;\r\n    case 400:\r\n      store.dispatch(\r\n        showSnack({ message: extractErrorMessage(data), options })\r\n      );\r\n      break;\r\n    case 403:\r\n      store.dispatch(\r\n        showSnack({ message: extractErrorMessage(data), options })\r\n      );\r\n      break;\r\n    case 422:\r\n      store.dispatch(\r\n        showSnack({ message: extractErrorMessage(data), options })\r\n      );\r\n      break;\r\n    case 404:\r\n      store.dispatch(showSnack({ message: \"Resource not found\", options }));\r\n      break;\r\n    default:\r\n      store.dispatch(showSnack({ message: \"Something went wrong\", options }));\r\n      break;\r\n  }\r\n};\r\n\r\nexport const getToken = async () => {\r\n  const state = store.getState();\r\n  const {\r\n    auth: { token },\r\n  } = state;\r\n\r\n  if (!token || !token.access.token || !token.refresh.token) {\r\n    return null;\r\n  }\r\n\r\n  const decodedToken = jwt_decode(token.access.token);\r\n  const date = new Date(0);\r\n  date.setUTCSeconds(decodedToken.exp);\r\n  if (date.valueOf() < new Date().valueOf()) {\r\n    try {\r\n      const result = await axios.post(\r\n        `${BASE_URL}/${ENDPOINTS.REFRESH_TOKEN}`,\r\n        { refreshToken: token.refresh.token }\r\n      );\r\n      store.dispatch(refreshTokenSuccess({ token: result.data.data }));\r\n      return result.data.data.accessToken;\r\n    } catch (err) {\r\n      errorHandler(err.response);\r\n    }\r\n  }\r\n  return token.access.token;\r\n};\r\n\r\nexport const uniqueValues = (arr, keyProps) => {\r\n  const kvArray = arr.map((entry) => {\r\n    const key = keyProps.map((k) => entry.headers[k]).join(\"|\");\r\n    return [key, entry];\r\n  });\r\n  const map = new Map(kvArray);\r\n  return Array.from(map.values());\r\n};\r\n","import axios from \"axios\";\r\nimport { BASE_URL, ENDPOINTS } from \"./constants\";\r\nimport { getToken, errorHandler } from \"./utils\";\r\n\r\nconst makeRequest = async (options) => {\r\n  return new Promise(async (resolve, reject) => {\r\n    try {\r\n      const defaultOptions = {\r\n        baseURL: BASE_URL,\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          reason: options.data?.reason || null,\r\n        },\r\n        timeout: 60000,\r\n      };\r\n\r\n      delete options.data?.reason;\r\n      const client = axios.create(defaultOptions);\r\n      const token = await getToken();\r\n      if (token) {\r\n        client.interceptors.request.use(function (config) {\r\n          config.headers.Authorization = `Bearer ${token}`;\r\n          return config;\r\n        });\r\n      }\r\n\r\n      return client(options)\r\n        .then((response) => {\r\n          return resolve(response.data);\r\n        })\r\n        .catch((error) => {\r\n          errorHandler(error.response ? error.response : { status: 500 });\r\n          return reject(\r\n            error.response && error.response.data.error\r\n              ? error.response.data.error\r\n              : \"Something went wrong\"\r\n          );\r\n        });\r\n    } catch (err) {\r\n      errorHandler({ status: 500 });\r\n      reject(err.message);\r\n    }\r\n  });\r\n};\r\n\r\nexport const GET = ({ url, params = {}, data = {} }) =>\r\n  makeRequest({ url, method: \"get\", params, data });\r\n\r\nexport const POST = ({ url, params = {}, data = {} }) =>\r\n  makeRequest({ url, method: \"post\", params, data });\r\n\r\nexport const PUT = ({ url, params = {}, data = {} }) =>\r\n  makeRequest({ url, method: \"put\", params, data });\r\n\r\nexport const PATCH = ({ url, params = {}, data = {} }) =>\r\n  makeRequest({ url, method: \"patch\", params, data });\r\n\r\nexport const DELETE = ({ url, params = {}, data = {} }) =>\r\n  makeRequest({ url, method: \"delete\", params, data });\r\n\r\nexport default ENDPOINTS;\r\n","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst DEVICE_SIZES = ['xxl', 'xl', 'lg', 'md', 'sm', 'xs'];\nconst Row = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  className,\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'div',\n  ...props\n}, ref) => {\n  const decoratedBsPrefix = useBootstrapPrefix(bsPrefix, 'row');\n  const sizePrefix = `${decoratedBsPrefix}-cols`;\n  const classes = [];\n  DEVICE_SIZES.forEach(brkPoint => {\n    const propValue = props[brkPoint];\n    delete props[brkPoint];\n    let cols;\n\n    if (propValue != null && typeof propValue === 'object') {\n      ({\n        cols\n      } = propValue);\n    } else {\n      cols = propValue;\n    }\n\n    const infix = brkPoint !== 'xs' ? `-${brkPoint}` : '';\n    if (cols != null) classes.push(`${sizePrefix}${infix}-${cols}`);\n  });\n  return /*#__PURE__*/_jsx(Component, {\n    ref: ref,\n    ...props,\n    className: classNames(className, decoratedBsPrefix, ...classes)\n  });\n});\nRow.displayName = 'Row';\nexport default Row;"],"sourceRoot":""}